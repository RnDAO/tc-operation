version: '3.8'

x-logging:
  &logging
  logging:
    driver: loki
    options:
      loki-url: http://172.22.22.15:3100/loki/api/v1/push
      loki-retries: 5
      loki-batch-size: 400

services:
  mongodb-dev:
    image: mongo:latest
    restart: unless-stopped
    command: ['--replSet', 'rs0']
    ports:
      - 37017:27017
    env_file:
      - ./.env.db
    volumes:
      - ./mongo:/etc/mongo:ro
      - mongodb_data_container:/data/db
      - ../init-mongo.sh:/docker-entrypoint-initdb.d/init-mongo.sh:ro
    healthcheck:
      test: test $(echo $(mongosh --quiet /etc/mongo/healthcheck.js)) -eq 1
      interval: 60s
      timeout: 10s
      retries: 2
      start_period: 40s
    networks:
      - development
      - monitoring
    <<: *logging

  rabbitmq-dev:
    image: rabbitmq:3-management
    restart: unless-stopped
    ports:
      - 6672:5672
      - 25672:15672
    volumes:
      - rmq_data_container:/var/lib/rabbitmq/
    env_file:
      - ./.env.rmq
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 2
      start_period: 40s
    networks:
      - development
      - monitoring
    <<: *logging

  redis-discord-bot-dev:
    image: redis:7.0.11
    restart: unless-stopped
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
    volumes:
      - type: bind
        source: ./redis/discordBot.conf
        target: /usr/local/etc/redis/redis.conf
        read_only: true
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 60s
      timeout: 10s
      retries: 2
      start_period: 40s
    networks:
      - development
      - monitoring
    <<: *logging

  redis-discord-analyzer-dev:
    image: redis:7.0.11
    restart: unless-stopped
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
    volumes:
      - type: bind
        source: ./redis/discordAnalyzer.conf
        target: /usr/local/etc/redis/redis.conf
        read_only: true
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 60s
      timeout: 10s
      retries: 2
      start_period: 40s
    networks:
      - development
      - monitoring
    <<: *logging

  neo4j-dev:
    image: neo4j:5.9.0
    restart: unless-stopped
    ports:
      - 27474:7474
      - 27687:7687
    env_file:
      - ./.env.neo4j
    volumes:
      # - neo4j_conf:/var/lib/neo4j/conf
      - neo4j_data:/data
      - neo4j_import:/import
      - neo4j_plugins:/plugins
    environment:
      # Raise memory limits
      - NEO4J_server.memory.heap.initial_size=2G
      - NEO4J_server.memory.heap.max_size=4G
      - NEO4J_PLUGINS=["apoc", "graph-data-science"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*,gds.*
    healthcheck:
      test: ["CMD" ,"wget", "http://localhost:7474"]
      interval: 1m30s
      timeout: 10s
      retries: 2
      start_period: 40s
    networks:
      - development
      - monitoring
    <<: *logging

  api:
    build:
      context: ../../api
      dockerfile: Dockerfile
      tags:
        - api:${VERSION:-latest}
    restart: unless-stopped
    environment:
      PORT: $PORT
    ports:
      - $HOST:$PORT:$PORT
    env_file:
      - ./.env.proc
    depends_on:
      mongodb-dev:
        condition: service_healthy
      neo4j-dev:
        condition: service_healthy
      rabbitmq-dev:
        condition: service_healthy
    networks:
      - development
      - monitoring
    <<: *logging

  tc-discord-bot-dev:
    build:
      context: ../../tc-discordBot
      target: prod
      dockerfile: Dockerfile
      tags:
        - tc-discord-bot:${VERSION:-latest}
    restart: unless-stopped
    env_file:
      - ./.env.bot.proc
    depends_on:
      mongodb-dev:
        condition: service_healthy
      redis-discord-bot-dev:
        condition: service_healthy
      rabbitmq-dev:
        condition: service_healthy
    networks:
      - development
      - monitoring
    <<: *logging

  discord-analyzer-server:
    image: ghcr.io/togethercrew/discord-analyzer:pr-58
    command: python3 server.py
    restart: unless-stopped
    env_file:
      - ./.env.analyzer.proc
    depends_on:
      redis-discord-analyzer-dev:
        condition: service_healthy
      rabbitmq-dev:
        condition: service_healthy
    networks:
      - development
      - monitoring
    <<: *logging

  discord-analyzer-worker:
    image: ghcr.io/togethercrew/discord-analyzer:pr-58
    command: python3 worker.py
    restart: unless-stopped
    env_file:
      - ./.env.analyzer.proc
    depends_on:
      mongodb-dev:
        condition: service_healthy
      redis-discord-analyzer-dev:
        condition: service_healthy
      neo4j-dev:
        condition: service_healthy
      rabbitmq-dev:
        condition: service_healthy
    networks:
      - development
      - monitoring
    <<: *logging

  redis-twitter-bot:
    image: redis:7.0.11
    restart: unless-stopped
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
    volumes:
      - type: bind
        source: ./redis/twitter.conf
        target: /usr/local/etc/redis/redis.conf
        read_only: true
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 60s
      timeout: 10s
      retries: 2
      start_period: 40s
    networks:
      - development
      - monitoring
    <<: *logging

  twitter-bot-server:
    image: ghcr.io/togethercrew/twitter-bot:main
    command: python3 server.py
    restart: unless-stopped
    env_file:
      - ./.env.twitter
    depends_on:
      mongodb-dev:
        condition: service_healthy
      neo4j-dev:
        condition: service_healthy
      rabbitmq-dev: 
        condition: service_healthy
      redis-twitter-bot:
        condition: service_healthy
    networks:
      - development
      - monitoring
    <<: *logging

  twitter-bot-worker:
    image: ghcr.io/togethercrew/twitter-bot:main
    command: python3 worker.py
    restart: unless-stopped
    env_file:
      - ./.env.twitter
    depends_on:
      mongodb-dev:
        condition: service_healthy
      neo4j-dev:
        condition: service_healthy
      rabbitmq-dev: 
        condition: service_healthy
      redis-twitter-bot:
        condition: service_healthy
    networks:
      - development
      - monitoring
    <<: *logging

  # HIVEMIND SERVICES - START
  hivemind-vector-server:
    image: ghcr.io/kamikazebr/qabot:main-vector_server
    depends_on:
      rabbitmq-dev: 
        condition: service_healthy
      hivemind-vector-redis:
        condition: service_healthy
      hivemind-vector-worker:
        condition: service_healthy
    env_file:
      - .env.hivemind.vector.server
    networks:
      - hivemind
      - development
      - monitoring
    <<: *logging
    ports:
      - 41234:1234

  hivemind-vector-worker:
    image: ghcr.io/kamikazebr/qabot:main-vector_server
    env_file:
      - .env.hivemind.vector.worker
    depends_on:
      hivemind-vector-redis:
        condition: service_healthy
    command: celery -A tasks.celery worker -c 1 --hostname hivemind-vector-worker --loglevel=info
    volumes:
      - hivemind_vector_store:/project/vector_store
    healthcheck:
      test: ["CMD-SHELL", "celery -A tasks.celery inspect ping"]
      interval: 10s
      timeout: 10s
      retries: 2
      start_period: 10s
    networks:
      - hivemind
      - monitoring
    <<: *logging

  hivemind-vector-redis:
    image: redis:7.0.11
    restart: unless-stopped
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
    volumes:
      - type: bind
        source: ./redis/hivemind.vector.conf
        target: /usr/local/etc/redis/redis.conf
        read_only: true
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 60s
      timeout: 10s
      retries: 2
      start_period: 40s
    networks:
      - hivemind
      - monitoring
    <<: *logging

  hivemind-api:
    image: ghcr.io/kamikazebr/qabot:main-ml
    env_file:
      - .env.hivemind.api
    networks:
      - hivemind
      - development
      - monitoring
    <<: *logging
    ports:
      - 43333:3333
  
  # HIVEMIND SERVICES - END

  # DISCOURSE SERVICES - START

  discourse-redis:
    image: redis:7.0.11
    restart: unless-stopped
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
    volumes:
      - type: bind
        source: ./redis/discourse.conf
        target: /usr/local/etc/redis/redis.conf
        read_only: true
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 60s
      timeout: 10s
      retries: 2
      start_period: 40s
    networks:
      - discourse
      - monitoring
    <<: *logging

  discourse:
    image: ghcr.io/togethercrew/discourse:main
    command: yarn run start:prod
    restart: always
    ports:
      - 43001:3000
    env_file:
      - .env.discourse
    depends_on:
      discourse-redis:
        condition: service_healthy
      rabbitmq-dev:
        condition: service_healthy
      neo4j-dev:
        condition: service_healthy
    networks:
      - discourse
      - development
      - monitoring
    <<: *logging

  # DISCOURSE SERVICES - END

volumes:
  mongodb_data_container:
  rmq_data_container:
  grafana_volume:
  graphite_volume:
  prometheus_volume:
  loki_volume:
  neo4j_data:
  neo4j_import:
  neo4j_plugins:
  hivemind_vector_store:

networks:
  development:
    driver: bridge
  monitoring:
    driver: bridge
    external: true
  hivemind:
    driver: bridge
  discourse:
    driver: bridge
