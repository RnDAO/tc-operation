version: '3.9'

x-logging:
  &logging
  logging:
    driver: loki
    options:
      loki-url: http://172.22.22.15:3100/loki/api/v1/push
      loki-retries: 5
      loki-batch-size: 400

services:
  mongodb-prod:
    image: mongo:latest
    container_name: mongodb-prod
    restart: unless-stopped
    env_file:
      - ./.env.db
    ports:
      - 37017:27017
    logging:
      driver: "json-file"
      options:
        max-size: "400k"
        max-file: "20"
    volumes:
      - mongodb_data_container:/data/db
      - type: bind
        source: ../init-mongo.sh
        target: /docker-entrypoint-initdb.d/init-mongo.sh
        read_only: true
    networks:
      - production
      - monitoring

  rabbitmq-prod:
    image: rabbitmq:3-management
    restart: unless-stopped
    ports:
        - 15672:15672
    volumes:
        - rmq_data_container:/var/lib/rabbitmq/
    env_file:
      - ./.env.rmq
    networks:
      - production
      - monitoring
    <<: *logging

  redis-discord-bot-prod:
    image: redis:7.0.11
    restart: unless-stopped
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    volumes:
      - type: bind
        source: ./redis/discordBot.conf
        target: /usr/local/etc/redis/redis.conf
        read_only: true
    networks:
      - production
      - monitoring
    <<: *logging

  redis-discord-analyzer-prod:
    image: redis:7.0.11
    restart: unless-stopped
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    volumes:
      - type: bind
        source: ./redis/discordAnalyzer.conf
        target: /usr/local/etc/redis/redis.conf
        read_only: true
    networks:
      - production
      - monitoring
    <<: *logging

  neo4j-prod:
    image: neo4j:5.9.0
    restart: unless-stopped
    ports:
      - 27474:7474
      - 27687:7687
    env_file:
      - ./.env.neo4j
    volumes:
      # - neo4j_conf:/var/lib/neo4j/conf
      - neo4j_data:/data
      - neo4j_import:/import
      - neo4j_plugins:/plugins
    environment:
      # Raise memory limits
      - NEO4J_server.memory.heap.initial_size=4G
      - NEO4J_server.memory.heap.max_size=8G
      - NEO4J_PLUGINS=["apoc", "graph-data-science"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*,gds.*
    networks:
      - production
      - monitoring
    <<: *logging

  tc-server-comm-prod:
    build:
      context: ../../tc-serverComm
      dockerfile: Dockerfile
      tags:
        - tc-server-comm:${VERSION:-latest}
    restart: unless-stopped
    environment:
      PORT: $PORT
    ports:
      - $HOST:$PORT:$PORT
    env_file:
      - ./.env.proc
    depends_on:
      - mongodb-prod
      - neo4j-prod
      - rabbitmq-prod
    networks:
      - production
      - monitoring
    <<: *logging

  tc-discord-bot-prod:
    build:
      context: ../../tc-discordBot
      target: prod
      dockerfile: Dockerfile
      tags:
        - tc-discord-bot:${VERSION:-latest}
    restart: unless-stopped
    env_file:
      - ./.env.bot.proc
    depends_on:
      - mongodb-prod
      - redis-discord-bot-prod
      - rabbitmq-prod
    networks:
      - production
      - monitoring
    <<: *logging

  discord-analyzer-server:
    image: ghcr.io/togethercrew/discord-analyzer:main
    command: python3 server.py
    restart: unless-stopped
    env_file:
      - ./.env.analyzer.proc
    depends_on:
      redis-discord-analyzer-prod:
        condition: service_healthy
      rabbitmq-prod:
        condition: service_healthy
    networks:
      - production
      - monitoring
    <<: *logging

  discord-analyzer-worker:
    image: ghcr.io/togethercrew/discord-analyzer:main
    command: python3 worker.py
    restart: unless-stopped
    env_file:
      - ./.env.analyzer.proc
    depends_on:
      mongodb-prod:
        condition: service_healthy
      redis-discord-analyzer-prod:
        condition: service_healthy
      neo4j-prod:
        condition: service_healthy
    networks:
      - production
      - monitoring
    <<: *logging

  manual-triggers:
    build:
      context: ../../manual-triggers
      dockerfile: Dockerfile
      tags:
        - manual-triggers:${VERSION:-latest}
    env_file:
      - ./.env.manual-triggers
    depends_on:
      - mongodb-prod
      - rabbitmq-prod
    networks:
      - production
      - monitoring
    <<: *logging

volumes:
  mongodb_data_container:
  rmq_data_container:
  neo4j_data:
  neo4j_import:
  neo4j_plugins:
  neo4j_conf:
  grafana_volume:
  prometheus_volume:
  loki_volume:

networks:
  production:
    driver: bridge
  monitoring:
    name: monitoring
    external: true
